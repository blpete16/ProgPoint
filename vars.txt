int force = 0;        // don't ask questions, compress links (-f) 
int no_name = -1;     // don't save or restore the original file name 
int no_time = -1;     // don't save or restore the original file time 
int recursive = 0;    // recurse through directories (-r) 
int list = 0;         // list the file contents (-l) 
int verbose = 0;      // be verbose (-v) 
int quiet = 0;        // be very quiet (-q) 
int do_lzw = 0;       // generate output compatible with old compress (-Z) 
int test = 0;         // test .gz file integrity 
int foreground;       // set if program run in foreground 
char *progname;       // program name 
int maxbits = BITS;   // max bits per code for LZW 
int method = DEFLATED;// compression method 
int level = 6;        // compression level 
int exit_code = OK;   // program exit code 
int save_orig_name;   // set if original name must be saved 
int last_member;      // set for .zip and .Z files 
int part_nb;          // number of parts in .gz file 
long time_stamp;      // original time stamp (modification time) 
long ifile_size;      // input file size, -1 for devices (debug only) 
char *env;            // contents of GZIP env variable 
char **args = NULL;   // argv pointer if GZIP env variable defined 
char z_suffix[MAX_SUFFIX+1]; // default suffix (can be set with --suffix) 
int  z_len;           // strlen(z_suffix) 

long bytes_in;             // number of input bytes 
long bytes_out;            // number of output bytes 
long total_in = 0;         // input bytes for all files 
long total_out = 0;        // output bytes for all files 
char ifname[MAX_PATH_LEN]; // input file name 
char ofname[MAX_PATH_LEN]; // output file name 
int  remove_ofname = 0;	   // remove output file on error 
struct stat istat;         // status for input file 
int  ifd;                  // input file descriptor 
int  ofd;                  // output file descriptor 
unsigned insize;           // valid bytes in inbuf 
unsigned inptr;            // index of next byte to be processed in inbuf 
unsigned outcnt;           // bytes in output buffer
